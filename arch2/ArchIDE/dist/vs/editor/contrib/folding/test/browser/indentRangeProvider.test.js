/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import assert from 'assert';
import { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';
import { computeRanges } from '../../browser/indentRangeProvider.js';
import { createTextModel } from '../../../../test/common/testTextModel.js';
function assertRanges(lines, expected, offside, markers) {
    const model = createTextModel(lines.join('\n'));
    const actual = computeRanges(model, offside, markers);
    const actualRanges = [];
    for (let i = 0; i < actual.length; i++) {
        actualRanges[i] = r(actual.getStartLineNumber(i), actual.getEndLineNumber(i), actual.getParentIndex(i));
    }
    assert.deepStrictEqual(actualRanges, expected);
    model.dispose();
}
function r(startLineNumber, endLineNumber, parentIndex, marker = false) {
    return { startLineNumber, endLineNumber, parentIndex };
}
suite('Indentation Folding', () => {
    ensureNoDisposablesAreLeakedInTestSuite();
    test('Fold one level', () => {
        const range = [
            'A',
            '  A',
            '  A',
            '  A'
        ];
        assertRanges(range, [r(1, 4, -1)], true);
        assertRanges(range, [r(1, 4, -1)], false);
    });
    test('Fold two levels', () => {
        const range = [
            'A',
            '  A',
            '  A',
            '    A',
            '    A'
        ];
        assertRanges(range, [r(1, 5, -1), r(3, 5, 0)], true);
        assertRanges(range, [r(1, 5, -1), r(3, 5, 0)], false);
    });
    test('Fold three levels', () => {
        const range = [
            'A',
            '  A',
            '    A',
            '      A',
            'A'
        ];
        assertRanges(range, [r(1, 4, -1), r(2, 4, 0), r(3, 4, 1)], true);
        assertRanges(range, [r(1, 4, -1), r(2, 4, 0), r(3, 4, 1)], false);
    });
    test('Fold decreasing indent', () => {
        const range = [
            '    A',
            '  A',
            'A'
        ];
        assertRanges(range, [], true);
        assertRanges(range, [], false);
    });
    test('Fold Java', () => {
        assertRanges([
            /* 1*/ 'class A {',
            /* 2*/ '  void foo() {',
            /* 3*/ '    console.log();',
            /* 4*/ '    console.log();',
            /* 5*/ '  }',
            /* 6*/ '',
            /* 7*/ '  void bar() {',
            /* 8*/ '    console.log();',
            /* 9*/ '  }',
            /*10*/ '}',
            /*11*/ 'interface B {',
            /*12*/ '  void bar();',
            /*13*/ '}',
        ], [r(1, 9, -1), r(2, 4, 0), r(7, 8, 0), r(11, 12, -1)], false);
    });
    test('Fold Javadoc', () => {
        assertRanges([
            /* 1*/ '/**',
            /* 2*/ ' * Comment',
            /* 3*/ ' */',
            /* 4*/ 'class A {',
            /* 5*/ '  void foo() {',
            /* 6*/ '  }',
            /* 7*/ '}',
        ], [r(1, 3, -1), r(4, 6, -1)], false);
    });
    test('Fold Whitespace Java', () => {
        assertRanges([
            /* 1*/ 'class A {',
            /* 2*/ '',
            /* 3*/ '  void foo() {',
            /* 4*/ '     ',
            /* 5*/ '     return 0;',
            /* 6*/ '  }',
            /* 7*/ '      ',
            /* 8*/ '}',
        ], [r(1, 7, -1), r(3, 5, 0)], false);
    });
    test('Fold Whitespace Python', () => {
        assertRanges([
            /* 1*/ 'def a:',
            /* 2*/ '  pass',
            /* 3*/ '   ',
            /* 4*/ '  def b:',
            /* 5*/ '    pass',
            /* 6*/ '  ',
            /* 7*/ '      ',
            /* 8*/ 'def c: # since there was a deintent here'
        ], [r(1, 5, -1), r(4, 5, 0)], true);
    });
    test('Fold Tabs', () => {
        assertRanges([
            /* 1*/ 'class A {',
            /* 2*/ '\t\t',
            /* 3*/ '\tvoid foo() {',
            /* 4*/ '\t \t//hello',
            /* 5*/ '\t    return 0;',
            /* 6*/ '  \t}',
            /* 7*/ '      ',
            /* 8*/ '}',
        ], [r(1, 7, -1), r(3, 5, 0)], false);
    });
});
const markers = {
    start: /^\s*#region\b/,
    end: /^\s*#endregion\b/
};
suite('Folding with regions', () => {
    ensureNoDisposablesAreLeakedInTestSuite();
    test('Inside region, indented', () => {
        assertRanges([
            /* 1*/ 'class A {',
            /* 2*/ '  #region',
            /* 3*/ '  void foo() {',
            /* 4*/ '     ',
            /* 5*/ '     return 0;',
            /* 6*/ '  }',
            /* 7*/ '  #endregion',
            /* 8*/ '}',
        ], [r(1, 7, -1), r(2, 7, 0, true), r(3, 5, 1)], false, markers);
    });
    test('Inside region, not indented', () => {
        assertRanges([
            /* 1*/ 'var x;',
            /* 2*/ '#region',
            /* 3*/ 'void foo() {',
            /* 4*/ '     ',
            /* 5*/ '     return 0;',
            /* 6*/ '  }',
            /* 7*/ '#endregion',
            /* 8*/ '',
        ], [r(2, 7, -1, true), r(3, 6, 0)], false, markers);
    });
    test('Empty Regions', () => {
        assertRanges([
            /* 1*/ 'var x;',
            /* 2*/ '#region',
            /* 3*/ '#endregion',
            /* 4*/ '#region',
            /* 5*/ '',
            /* 6*/ '#endregion',
            /* 7*/ 'var y;',
        ], [r(2, 3, -1, true), r(4, 6, -1, true)], false, markers);
    });
    test('Nested Regions', () => {
        assertRanges([
            /* 1*/ 'var x;',
            /* 2*/ '#region',
            /* 3*/ '#region',
            /* 4*/ '',
            /* 5*/ '#endregion',
            /* 6*/ '#endregion',
            /* 7*/ 'var y;',
        ], [r(2, 6, -1, true), r(3, 5, 0, true)], false, markers);
    });
    test('Nested Regions 2', () => {
        assertRanges([
            /* 1*/ 'class A {',
            /* 2*/ '  #region',
            /* 3*/ '',
            /* 4*/ '  #region',
            /* 5*/ '',
            /* 6*/ '  #endregion',
            /* 7*/ '  // comment',
            /* 8*/ '  #endregion',
            /* 9*/ '}',
        ], [r(1, 8, -1), r(2, 8, 0, true), r(4, 6, 1, true)], false, markers);
    });
    test('Incomplete Regions', () => {
        assertRanges([
            /* 1*/ 'class A {',
            /* 2*/ '#region',
            /* 3*/ '  // comment',
            /* 4*/ '}',
        ], [r(2, 3, -1)], false, markers);
    });
    test('Incomplete Regions 2', () => {
        assertRanges([
            /* 1*/ '',
            /* 2*/ '#region',
            /* 3*/ '#region',
            /* 4*/ '#region',
            /* 5*/ '  // comment',
            /* 6*/ '#endregion',
            /* 7*/ '#endregion',
            /* 8*/ ' // hello',
        ], [r(3, 7, -1, true), r(4, 6, 0, true)], false, markers);
    });
    test('Indented region before', () => {
        assertRanges([
            /* 1*/ 'if (x)',
            /* 2*/ '  return;',
            /* 3*/ '',
            /* 4*/ '#region',
            /* 5*/ '  // comment',
            /* 6*/ '#endregion',
        ], [r(1, 3, -1), r(4, 6, -1, true)], false, markers);
    });
    test('Indented region before 2', () => {
        assertRanges([
            /* 1*/ 'if (x)',
            /* 2*/ '  log();',
            /* 3*/ '',
            /* 4*/ '    #region',
            /* 5*/ '      // comment',
            /* 6*/ '    #endregion',
        ], [r(1, 6, -1), r(2, 6, 0), r(4, 6, 1, true)], false, markers);
    });
    test('Indented region in-between', () => {
        assertRanges([
            /* 1*/ '#region',
            /* 2*/ '  // comment',
            /* 3*/ '  if (x)',
            /* 4*/ '    return;',
            /* 5*/ '',
            /* 6*/ '#endregion',
        ], [r(1, 6, -1, true), r(3, 5, 0)], false, markers);
    });
    test('Indented region after', () => {
        assertRanges([
            /* 1*/ '#region',
            /* 2*/ '  // comment',
            /* 3*/ '',
            /* 4*/ '#endregion',
            /* 5*/ '  if (x)',
            /* 6*/ '    return;',
        ], [r(1, 4, -1, true), r(5, 6, -1)], false, markers);
    });
    test('With off-side', () => {
        assertRanges([
            /* 1*/ '#region',
            /* 2*/ '  ',
            /* 3*/ '',
            /* 4*/ '#endregion',
            /* 5*/ '',
        ], [r(1, 4, -1, true)], true, markers);
    });
    test('Nested with off-side', () => {
        assertRanges([
            /* 1*/ '#region',
            /* 2*/ '  ',
            /* 3*/ '#region',
            /* 4*/ '',
            /* 5*/ '#endregion',
            /* 6*/ '',
            /* 7*/ '#endregion',
            /* 8*/ '',
        ], [r(1, 7, -1, true), r(3, 5, 0, true)], true, markers);
    });
    test('Issue 35981', () => {
        assertRanges([
            /* 1*/ 'function thisFoldsToEndOfPage() {',
            /* 2*/ '  const variable = []',
            /* 3*/ '    // #region',
            /* 4*/ '    .reduce((a, b) => a,[]);',
            /* 5*/ '}',
            /* 6*/ '',
            /* 7*/ 'function thisFoldsProperly() {',
            /* 8*/ '  const foo = "bar"',
            /* 9*/ '}',
        ], [r(1, 4, -1), r(2, 4, 0), r(7, 8, -1)], false, markers);
    });
    test('Misspelled Markers', () => {
        assertRanges([
            /* 1*/ '#Region',
            /* 2*/ '#endregion',
            /* 3*/ '#regionsandmore',
            /* 4*/ '#endregion',
            /* 5*/ '#region',
            /* 6*/ '#end region',
            /* 7*/ '#region',
            /* 8*/ '#endregionff',
        ], [], true, markers);
    });
    test('Issue 79359', () => {
        assertRanges([
            /* 1*/ '#region',
            /* 2*/ '',
            /* 3*/ 'class A',
            /* 4*/ '  foo',
            /* 5*/ '',
            /* 6*/ 'class A',
            /* 7*/ '  foo',
            /* 8*/ '',
            /* 9*/ '#endregion',
        ], [r(1, 9, -1, true), r(3, 4, 0), r(6, 7, 0)], true, markers);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZW50UmFuZ2VQcm92aWRlci50ZXN0LmpzIiwic291cmNlUm9vdCI6ImZpbGU6Ly8vVXNlcnMvYWR2aWthci9Eb2N1bWVudHMvYXJjaGl0ZWN0L2FyY2gyL0FyY2hJREUvc3JjLyIsInNvdXJjZXMiOlsidnMvZWRpdG9yL2NvbnRyaWIvZm9sZGluZy90ZXN0L2Jyb3dzZXIvaW5kZW50UmFuZ2VQcm92aWRlci50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Z0dBR2dHO0FBRWhHLE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUM1QixPQUFPLEVBQUUsdUNBQXVDLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUVuRyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDckUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBUTNFLFNBQVMsWUFBWSxDQUFDLEtBQWUsRUFBRSxRQUErQixFQUFFLE9BQWdCLEVBQUUsT0FBd0I7SUFDakgsTUFBTSxLQUFLLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNoRCxNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUV0RCxNQUFNLFlBQVksR0FBMEIsRUFBRSxDQUFDO0lBQy9DLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDeEMsWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RyxDQUFDO0lBQ0QsTUFBTSxDQUFD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