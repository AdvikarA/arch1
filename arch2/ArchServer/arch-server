#!/usr/bin/env node

/**
 * ArchServer - Custom VS Code Server
 * 
 * This is a wrapper script that starts the ArchServer instance.
 * It can be used as a standalone binary or called by the SSH extension.
 */

import path from 'path';
import { spawn } from 'child_process';
import { fileURLToPath } from 'url';

// Get the directory where this script is located
const __filename = fileURLToPath(import.meta.url);
const scriptDir = path.dirname(__filename);
const serverMainPath = path.join(scriptDir, 'out', 'server-main.js');

// Parse command line arguments
const args = process.argv.slice(2);

// Default port if not specified
const defaultPort = 8080;

// Check if port is specified
let port = defaultPort;
let host = '0.0.0.0';
let socketPath = null;

for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    
    if (arg === '--port' && i + 1 < args.length) {
        port = parseInt(args[i + 1]);
        i++;
    } else if (arg === '--host' && i + 1 < args.length) {
        host = args[i + 1];
        i++;
    } else if (arg === '--socket-path' && i + 1 < args.length) {
        socketPath = args[i + 1];
        i++;
    } else if (arg === '--help' || arg === '-h') {
        console.log(`
ArchServer - Custom VS Code Server

Usage: arch-server [options]

Options:
  --port <number>        Port to listen on (default: ${defaultPort})
  --host <string>        Host to bind to (default: 0.0.0.0)
  --socket-path <path>   Unix socket path (alternative to port)
  --help, -h            Show this help message

Examples:
  arch-server --port 8080
  arch-server --socket-path /tmp/arch-server.sock
  arch-server --host 127.0.0.1 --port 9000
`);
        process.exit(0);
    }
}

// Set environment variables
process.env.VSCODE_SERVER_DATA_FOLDER = '.arch-server';
process.env.VSCODE_SERVER_APPLICATION_NAME = 'arch-server';

// Build the arguments for the server
const serverArgs = [
    serverMainPath,
    '--host', host
];

if (socketPath) {
    serverArgs.push('--socket-path', socketPath);
} else {
    serverArgs.push('--port', port.toString());
}

// Add any additional arguments passed to this script
serverArgs.push(...args.filter(arg => !arg.startsWith('--port') && !arg.startsWith('--host') && !arg.startsWith('--socket-path')));

console.log(`Starting ArchServer on ${socketPath ? `socket ${socketPath}` : `${host}:${port}`}`);

// Spawn the server process
const serverProcess = spawn('node', serverArgs, {
    stdio: 'inherit',
    cwd: scriptDir
});

// Handle process events
serverProcess.on('error', (err) => {
    console.error('Failed to start ArchServer:', err);
    process.exit(1);
});

serverProcess.on('exit', (code) => {
    console.log(`ArchServer exited with code ${code}`);
    process.exit(code);
});

// Handle signals
process.on('SIGINT', () => {
    console.log('\nShutting down ArchServer...');
    serverProcess.kill('SIGINT');
});

process.on('SIGTERM', () => {
    console.log('\nShutting down ArchServer...');
    serverProcess.kill('SIGTERM');
}); 